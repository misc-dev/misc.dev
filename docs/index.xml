<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MISC.DEV</title>
    <link>https://misc.dev/</link>
    <description>Recent content on MISC.DEV</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jul 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://misc.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>On Growing a Nonprofit Dev Team</title>
        <link>https://misc.dev/posts/building-a-nonprofit-dev-team/</link>
        <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
        
        <guid>https://misc.dev/posts/building-a-nonprofit-dev-team/</guid>
        <description>MISC.DEV https://misc.dev/posts/building-a-nonprofit-dev-team/ -&lt;h1 id=&#34;the-challenges&#34;&gt;The Challenges&lt;/h1&gt;
&lt;p&gt;I have spent much of my career working in nonprofit organizations such as libraries, museums, and universities. Working in these organizations gives me a great sense of purpose. I know that I am contributing to efforts to make the world a better place. Working specifically in the technology departments of these organizations offers its own set of rewards and frustrations. On one hand, the technology in these organizations is often dated. Thus, there is usually plenty of low hanging fruit that can be addressed fairly quickly by a newcomer which earns the gratitude of other members of the organization. However, once those quick wins are done and the organization wants to move into more advanced projects, that same newcomer may encounter difficulty in forming a tech team capable of achieving those more ambitious goals.&lt;/p&gt;
&lt;p&gt;Usually, the skillset of a tech team matches the tech stack of the organization. Thus, if the technology is dated, so are the skills of the tech team. The organization cannot realistically expect such a team to suddenly take on ambitious projects using new methods and advanced technologies. First, the team must undergo a modernization. My &lt;a href=&#34;https://misc.dev/posts/modernizing-a-dev-team/&#34;&gt;previous post&lt;/a&gt; describes such an effort.&lt;/p&gt;
&lt;p&gt;Alternatively, the organization may commit resources to hiring new members of the tech team. This is a wonderful position to be in, but ironically it can also be even more frustrating. Convincing talented software engineers, sysadmins, and other tech workers to join a nonprofit is very difficult. Salaries offered by nonprofits are usually lower than those offered by commercial organizations such as banks and retail firms, and they are much lower than those offered by tech firms.&lt;/p&gt;
&lt;p&gt;If you are in a large metropolitan area, such as Los Angeles, which has offices for all of the big tech giants (Google, Netflix, Amazon, and more), then the market is just too competitive. I have never had a senior level engineer with experience in one of these companies apply for jobs at any of the nonprofit organizations I have worked with in the past ten years. As an alternative, I will often reach out through listservs to the communities of techies that already work in nonprofits and try to convince the most advanced members to come join my team. I feel somewhat guilty about this, as it is almost like poaching from my colleagues, who I know are facing similar challenges. However, this tactic almost never works anyway. The cost of living in Los Angeles is very high, and it has been near impossible to convince these senior level developers to give up home ownership in the Midwest or East Coast for an apartment in LA, which is about all they can afford on a nonprofit salary.&lt;/p&gt;
&lt;p&gt;So, if advanced engineers do not apply for jobs at your nonprofit, how can you build an advanced tech team? In a word, be &lt;em&gt;&lt;strong&gt;proactive&lt;/strong&gt;&lt;/em&gt;. Below I discuss several actions you can take. I recommend doing all of them rather than just picking one or two.&lt;/p&gt;
&lt;h1 id=&#34;the-methods&#34;&gt;The Methods&lt;/h1&gt;
&lt;p&gt;Building or rebuilding a tech team is like reviving a garden. First you assess what is already in the garden and your goals, then you take actions to transform it into your vision. This can involve nurturing the existing plants, purchasing some full grown plants from a local nursery, and growing new plants by planting seeds. It can also mean making environmental changes to the garden itself. And for long term success you need to ensure you are allocating the right amount of your time and resources to its success. All of these actions apply to your team as well.&lt;/p&gt;
&lt;h2 id=&#34;1-training&#34;&gt;1. Training&lt;/h2&gt;
&lt;p&gt;The first thing to do is work with the team you already have. Instead of hoping for an advanced engineer to walk through your doors, transform your current mid-level engineers into advanced engineers. My &lt;a href=&#34;https://misc.dev/posts/modernizing-a-dev-team/&#34;&gt;previous post&lt;/a&gt; described my efforts to modernize my current team. Much of that described changes for the team as a whole. The training I refer to here is at the individual level.&lt;/p&gt;
&lt;h3 id=&#34;assessment--assignment&#34;&gt;Assessment &amp;amp; Assignment&lt;/h3&gt;
&lt;p&gt;First, map out what your desired future system architecture will look like. Then determine what skills your team will need to acquire in order to build and support such a portfolio. Talk to your team members and figure out who has the aptitude and desire to learn each of the necessary skills and tools. Then create learning and skill acquisition goals to their annual performance reviews to reinforce the idea that this is a real goal, not something you mentioned in passing and which will be forgotten or deprioritized.&lt;/p&gt;
&lt;p&gt;My team uses a “Learning Goals” Scrum board which has 3 month “sprints”. Each team member sets quarterly learning goals by creating tickets and we review the progress of those tickets on the board once a week.&lt;/p&gt;
&lt;h3 id=&#34;time--resource-allocation&#34;&gt;Time &amp;amp; Resource Allocation&lt;/h3&gt;
&lt;p&gt;Simply identifying the needed skill and assigning it as a goal is not sufficient. Assigning a goal without providing an environment or time to achieve it is a recipe for failure. Education is an investment. If you want the payoff of a highly skilled team, you must make an up front investment and reduce your team’s workload to accommodate the time needed for training. You must state and respect that X number of hours will be spent on learning, not development. So reduce the scope of your team’s goals for the upcoming sprint, quarter, and/or year.&lt;/p&gt;
&lt;p&gt;And you must provide the necessary resources to facilitate their learning. There are lots of learning platforms out there for software tools and concepts and many of them are reasonably priced. My team tried out &lt;a href=&#34;https://www.coursera.org/&#34;&gt;Coursera&lt;/a&gt;, but did not make much use of it. The catalog of courses is strong in CS theory but not practical skills. Instead, my team has been very happy with &lt;a href=&#34;https://frontendmasters.com/&#34;&gt;Frontend Masters&lt;/a&gt; and &lt;a href=&#34;https://www.vuemastery.com/&#34;&gt;Vue Mastery&lt;/a&gt; for the developers, and &lt;a href=&#34;https://linuxacademy.com/&#34;&gt;Linux Academy&lt;/a&gt; for the sysadmins, and &lt;a href=&#34;https://learning.oreilly.com&#34;&gt;O’Reilly Learning&lt;/a&gt; for everyone.&lt;/p&gt;
&lt;h3 id=&#34;undisturbed-learning-time&#34;&gt;Undisturbed Learning Time&lt;/h3&gt;
&lt;p&gt;Telling an employee to spend X number of hours a week on learning is rarely effective. They know that the actual development work is how they will ultimately be evaluated, no matter what you record in their annual performance goals. And they are constantly bombarded with email and chat messages from their peers and stakeholders asking them to look at code, bugs, attend meetings, and so on. The learning hours will always be postponed. As the manager, it is your responsibility to shield them from that bombardment and give them time for undisturbed learning.&lt;/p&gt;
&lt;p&gt;My team has adopted a culture of “Learning Fridays.” We forbid all meetings on Fridays, except for the 15 minute daily standup (in the afternoon) in which we only look at the “Learning Goals” Scrum board and quickly share what each team member learned that day. We communicate this policy to our colleagues/stakeholders in the organization as well, so that they also respect the “no meetings” policy and do not send interrupting messages to the team’s various Slack channels (hold those thoughts until Monday). This standardization of dedicated learning time ensures the team has the time and mental bandwidth to actively learn. It is also a pretty impactful signifier of just how serious you are about the professional development of your team.&lt;/p&gt;
&lt;h3 id=&#34;foster-experimentation&#34;&gt;Foster Experimentation&lt;/h3&gt;
&lt;p&gt;When allocating time and resources, be sure to accommodate your team’s variety of learning styles. Not everybody learns the same way. Some prefer books, some like to read through documentation, some like video lessons, and some like to learn by poking, tinkering, and building. When it comes to mastering new technology, that last modality of “learning by doing” is often the preferred method and often the most effective. So in addition to providing time and resources, be sure to foster a culture of experimentation as part of the learning time. The experimental projects can be solo or group-based. Those group projects can be a “force multiplier” as it adds the benefit of diversity that a team gets from pair programming on top of the focus of undisturbed learning time.&lt;/p&gt;
&lt;h2 id=&#34;2-active-recruiting&#34;&gt;2. Active Recruiting&lt;/h2&gt;
&lt;p&gt;Now let’s take a look at a scenario in which you and your administrators have determined that your team is too small to achieve your organization’s goals, regardless of the skillset of your team, and you have been giving funding to add new members to the team. You still face the challenges outlined in the introduction regarding the recruitment of highly skilled tech workers. Your HR department probably has a set list of channels through which they advertise your open positions. Do not rely on this kind of passive recruitment. To get the kind of people you want to join your team, you have to go out to where those people are and show them how great it would be &lt;em&gt;for them&lt;/em&gt; to join your team.&lt;/p&gt;
&lt;h3 id=&#34;personalize-the-postings&#34;&gt;Personalize the Postings&lt;/h3&gt;
&lt;p&gt;You know your position has been advertised to your peers. You know the language in the job description is formulaic and dull. Well, then do something about that. You may not be able to convince your HR staff to change the official job announcement, but you can certainly let your peers know there is a lot more to it. Post a personal note to your professional listservs, Slack channels, IRCs, and so on. Describe the new directions you are taking the team, your vision for the future, the cool projects, materials, and people that the new member will get to work with. Let people know they can contact you directly to discuss the team, the org, and the projects. By breathing some personality and life into that boring job description, you will increase your chances of catching the eye of talented people.&lt;/p&gt;
&lt;h3 id=&#34;network&#34;&gt;Network&lt;/h3&gt;
&lt;p&gt;Personalized posts to your peers in nonprofits is beneficial, but it does not help you cast a wider net. If you want to attract tech talent from the industry, you need to get out and mingle with those people. Go to tech meetups and get to know your peers from outside the nonprofit domain. This is just a good thing to do in general, for your own professional development and to keep up to date on new techniques and tools. But it is also great for recruitment. The time you put into making connections here will pay off down the line when you have an opening. But you have to invest the time up front. You cannot show up as a stranger and expect people to show interest in working with you. But if you are a known and respected member of the group, people will pay attention when you announce you have a position available.&lt;/p&gt;
&lt;h3 id=&#34;show-and-tell&#34;&gt;Show and Tell&lt;/h3&gt;
&lt;p&gt;Attending meetups is one thing. It will at least make your face recognizable. But if you really want to get value out of your time spent at these meetups, you should present on the work your team is doing. This can be intimidating. As mentioned at the outset of this post, nonprofits usually make use of dated technology, the kind that nobody wants to hear about at meetups. Meetups are usually about the latest and greatest things. However, there are two ways out of that conundrum.&lt;/p&gt;
&lt;p&gt;One, is to focus on the resources or services that your organization is providing rather than the technology. You will find that people who work for ecommerce or tech firms are often extremely fascinated by the projects you tell them you are working on. Let’s face it, working with cultural heritage resources and providing services that make the world a better place are both far more interesting than delivering ads online.&lt;/p&gt;
&lt;p&gt;Second, you can frame the presentation around how you are transitioning your technology stack and making use of the tools and techniques that particular meetup group is so familiar with. This will enable you to give a presentation before you have anything to really brag about. That, combined with the intriguing domain of your organization, can spark interest in potential candidates who see an opportunity to be a leader on your team and do something of great intrinsic value. If nothing else, you will likely get plenty of advice from the audience members about antipatterns and gotchas to watch out for as you adopt that new tool.&lt;/p&gt;
&lt;h2 id=&#34;3-teaching&#34;&gt;3. Teaching&lt;/h2&gt;
&lt;p&gt;For this third method, imagine a scenario in which you have tried the previous method of active recruitment, but still cannot convince advanced engineers to join your team. This is not hard to imagine. I have found myself in this position multiple times. At some point I had the realization that if I could not convince experienced software engineers to join my team in the library, then I should try going in the other direction. That is, find people already interested in working in libraries and teach them to be software engineers. This is significantly different from the training method discussed above. That was about levelling up or shifting skills for experienced techies already on your team. What I am proposing here is teaching non-techies from scratch so that you can then recruit them when you have positions available.&lt;/p&gt;
&lt;h3 id=&#34;become-a-lecturer&#34;&gt;Become a Lecturer&lt;/h3&gt;
&lt;p&gt;There are a few ways you can go about this. One is to actually become an instructor (Professor, Lecturer, etc.) at a local university or college. That is the route I took. When I couldn’t recruit engineers to work at my library, I began teaching technology classes at UCLA’s &lt;a href=&#34;https://is.gseis.ucla.edu/&#34;&gt;Department of Information Studies&lt;/a&gt;, where future librarians get their Master’s degrees. I knew the department was interested in adding technology courses to the curriculum, so I introduced myself to the department head and offered my services. My first offering was essentially a crash course in computer science topics along with an introduction to programming. I also taught courses on web development and databases. I imagine something similar could possibly be done in a department of social work, public policy, urban planning, etc.&lt;/p&gt;
&lt;p&gt;Perhaps the academic route seems daunting or perhaps your local campus does not have a department related to your organization’s domain. If so, you could also look into lecturing for one of the “coding boot camps” that have recently grown in popularity. I am not familiar enough with these programs to offer an insight as to how to get involved. However, I have seen many of them host meetups, so that seems the easiest way to introduce yourself and meet the person who hires instructors.&lt;/p&gt;
&lt;p&gt;Aside from official lecturing positions, you could also become an instructor for less formal instruction, such as the &lt;a href=&#34;https://carpentries.org/&#34;&gt;Carpentries&lt;/a&gt; or a course of your own design. You can host a meetup for beginners and offer to teach an introduction to programming for people in your domain. You could even offer it to people already in your organization that are interested in picking up technical skills.&lt;/p&gt;
&lt;h3 id=&#34;build-a-recruitment-pathway&#34;&gt;Build a Recruitment Pathway&lt;/h3&gt;
&lt;p&gt;No matter where you end up offering your instruction, keep in mind the goal is to eventually recruit skilled people to your team. So, in addition to teaching the tools and techniques you are looking for in a candidate, be sure to build a path towards employment for your best students.&lt;/p&gt;
&lt;h4 id=&#34;paid-internships&#34;&gt;Paid Internships&lt;/h4&gt;
&lt;p&gt;The first  step is to offer internships. This will likely work better for the academic setting rather than bootcamps or meetups, since full time students are more likely to have time for an internship. &lt;em&gt;&lt;strong&gt;Do not ask your students to take an unpaid internship.&lt;/strong&gt;&lt;/em&gt; I have been in that situation in the past, and I feel awful about it. I am very happy that my current organization has agreed to a policy mandating that all interns must be paid. Work with your administrators and HR reps to allocate resources for an official internship or a limited term, part-time employee.&lt;/p&gt;
&lt;h4 id=&#34;structure-the-internship&#34;&gt;Structure the Internship&lt;/h4&gt;
&lt;p&gt;The internship should be well structured to give the intern valuable work experience and to hone their skills. An internship lacking in structure and guidance, or consisting of just “busy-work”, is of no value. That is true for any internship, but is especially true in this scenario, in which you are attempting to groom a candidate for hire. Don’t waste your time training them to do clerical tasks. If you want a future engineer, then give them engineering assignments.&lt;/p&gt;
&lt;p&gt;Ideally, you would just add them to your regular team’s Scrum meetings and standups and have them contribute to your team’s “real” projects like everyone else. However, since students usually work just a few hours a week, you will have to get creative if you want them to contribute to your primary projects without becoming a bottleneck. It may be best to carve out a side project that is non-blocking but still uses the same toolset and is appropriate for a junior level employee. Have them pair up with an advanced member of the team at times. This will greatly facilitate their learning and can challenge your senior level members by forcing them to answer questions about things they take for granted.&lt;/p&gt;
&lt;p&gt;Be sure that the project is achievable within the timeframe of the internship. In addition to gaining skills, you want the intern to leave with a feeling of accomplishment. This will be a great confidence booster. And confidence is key when it comes to the growth of a new developer. There is so much to learn in technology. It can be very daunting when you first start out. Many of us who have been doing this for a while have forgotten what that feels like to be a beginner. We gain confidence with every new skill we learn and project we complete. Eventually we get to a point where most new tools and skills just sound like variations on themes we have heard before. We have no doubt we could learn to use any new tool that comes along. And that’s exactly the kind of confidence you should engender in your interns.&lt;/p&gt;
&lt;h4 id=&#34;bring-them-onboard&#34;&gt;Bring them Onboard&lt;/h4&gt;
&lt;p&gt;As an instructor you will very easily identify the smartest and hardest working students. These are the ones you ask to become interns. At that point, you will also get a view into their interpersonal skills as they interact with your team. Ideally, you would have a vacant position open up just as the student graduates, but that obviously cannot be counted on.&lt;/p&gt;
&lt;p&gt;If you have a really great student you want on your team but no vacancies, then get creative and find a way to “create” a new position. Getting a new permanent FTE can be near impossible, especially for a junior level position. You may be better off trying to get temporary funding for a limited term position. This is a stepping stone for your student towards a permanent position. Look for opportunities in newly funded projects, grants, and initiatives. See if you can carve out a 1, 2, or 3 year term position that addresses the needs of the project and is a suitable entry level position for your prize student. Alternatively, find stakeholders with budgets and talk to them about their pet projects. Offer to implement those enhancements they’ve been wishing for if they help fund a limited term position for this great student that is eager to work on their project. Once on board, try to find a way to extend their contract until a permanent position can be allocated.&lt;/p&gt;
&lt;p&gt;If you cannot bring the students onboard, at least keep in contact with them. Offer to help them find jobs elsewhere by writing a letter of recommendation. Even if you do not benefit from the work you put into grooming them, you will at least grow your network of contacts at your peer institutions, which may also help you with future recruiting.&lt;/p&gt;
&lt;h2 id=&#34;4-changing-policies&#34;&gt;4. Changing Policies&lt;/h2&gt;
&lt;p&gt;The three methods described above involve going out and interacting with people who have potential to become an advanced developer on your team. The next two actions involve some inward interactions, either with your administrators and HR department, or perhaps just with yourself. Our organizations often limit their own candidate pools with bureaucratic policies that may seem sensible at first glance, but which are entirely unnecessary and which are in fact detrimental to your team, the organization, and to the candidates these policies overlook.&lt;/p&gt;
&lt;h3 id=&#34;allow-remote-employees&#34;&gt;Allow Remote Employees&lt;/h3&gt;
&lt;p&gt;Many organizations prohibit the recruitment of remote employees. If you are in a major metropolitan area, then limiting your recruitment to local candidates puts you at a major disadvantage. You are in competition with the tech firms and corporate giants that offer much higher salaries. You will find it difficult to convince colleagues to move to your big city if your offered salary is not sufficient to purchase a home in the area. But if you offered that same salary while allowing them to stay in their current town which has a lower cost of living, you will find that many more talented folks will be interested in your open position.&lt;/p&gt;
&lt;p&gt;The prohibition of remote employees is an outdated policy that needs to die. It stems from a lack of trust in employees to work without physical supervision. This is a terrible way to run an organization. If you cannot trust your employees to do the work you hired them to do, then either you hired the wrong people, or you have not properly structured the work to give the employees satisfaction in completing it, or your team is severely lacking in actual teamwork.&lt;/p&gt;
&lt;p&gt;There is no reason not to hire remote employees, especially when it comes to IT. I have heard colleagues argue that there are disadvantages. Perhaps there are, but they are far outweighed by the giant advantage of being able to recruit really good people to your team that would otherwise not be willing to join. Some argue that a culture of “us versus them” will sprout when you mix local and remote. I argue that only happens if you allow it to. One way to avoid that attitude is to allow (and encourage) the local people to work from home one or two days a week. This turns them into remote employees as well, and helps the team adopt a “remote first” culture. My current team consists of about 50% on-site and 50% remote employees, spanning 5 time zones. The team is highly effective despite the wide physical distribution of its members.&lt;/p&gt;
&lt;p&gt;My hope is that the current pandemic will help break these old prohibitions on remote employees now that pretty much everyone is a remote employee.&lt;/p&gt;
&lt;h3 id=&#34;anti-racist--anti-sexist-recruitment&#34;&gt;Anti-racist &amp;amp; Anti-sexist Recruitment&lt;/h3&gt;
&lt;p&gt;Another detrimental policy which seems fine on the surface is the requirement that candidates possess a degree in computer science.  This policy gains nothing for the organization. Most software development at a nonprofit organization revolves around website and web application development, and possibly some mobile app development as well. None of this requires a degree in computer science. Tech firms that are pushing the boundaries of performance and devising new algorithms need engineers with that kind of education. But basic web development for a nonprofit involves composition of prebuilt components or building on top of a robust framework. These skills can (and are) picked up by people with no CS education. On the contrary, many fresh computer science graduates have no idea how to build a clean, reliable, and secure web application. An understanding of CS theories is no guarantee of practical skills.&lt;/p&gt;
&lt;p&gt;Many of us promote the idea of diversity but do not take the right actions to back up our words. Eliminating the CS degree requirement is the first step we should all take. Black students and female students are vastly underrepresented in computer science departments. And if the CS degree adds nothing to our candidate pools, as I argued above, then by requiring it we are actively choosing to block black and female developers from the workforce.&lt;/p&gt;
&lt;p&gt;Another aspect to this topic is the hunt for advanced developers and the lack of entry-level offerings. Most HR departments allow managers to post a position with a variable classification, such as Software Developer I, II, or III depending on the selected candidate’s experience. However, I often put most of my effort into trying to recruit advanced engineers. Indeed, this whole blog post began with that premise. This is usually because I have been handed an ambitious project and one or two FTEs to go with it. Naturally, I want to find advanced engineers that can jump in right away and help guarantee a successful outcome for the project.&lt;/p&gt;
&lt;p&gt;However, this preference for advanced recruits also plays into the systemic bias against black and female developers. Since they are underrepresented in the CS departments and therefore in the workforce, they usually pick up their skills on their own often while performing other duties in their current jobs. Thus, their resumes list little to no official developer titles in their work experience despite having actually learned the skills and built production applications. Many of these candidates would be very appealing as entry- or mid-level developers, but our insistence on finding advanced people blinds us to what is right in front of us: candidates that are self-motivated, team players, and capable of quickly learning new skills. Those are the three key attributes I look for in all software developer candidates. So I, and all you other engineering managers out there, need to stop focusing on the hunt for advanced engineers and instead provide opportunities for candidates without CS credentials or official development titles in their work histories. When doing this be sure to provide structure, mentorship, and training as described above. You can think of your team as a garden.&lt;/p&gt;
&lt;h2 id=&#34;5-advocating-for-a-team&#34;&gt;5. Advocating for a Team&lt;/h2&gt;
&lt;h3 id=&#34;raises--equity&#34;&gt;Raises &amp;amp; Equity&lt;/h3&gt;
&lt;p&gt;On top changing hiring practices, there is more internal advocacy that you must take on if you intend to keep the high quality team you have spent so much effort in growing. As your team levels up their skills they are likely to become more sensitive to issues around salaries, either through sheer self-awareness of their new value, or through a bombardment of messages from recruiters. If you do not address the salary gap, you are likely to lose some of the best contributors on your team. You could just wait for those people to get job offers and hope that your institution will make a satisfactory counter-offer. But that is a dangerous game to play. You are much better off putting in the effort up front and advocating for salary increases before your best and brightest start looking for and listening to offers from elsewhere.&lt;/p&gt;
&lt;p&gt;This is not an easy task, but it is worth the effort if it means keeping your team. If you don’t do this work, then you will once again have to go through all the team building work described in the sections above to fill vacancies created by people leaving for higher salaries. Document the accomplishments of the individual and how those contributed to successes for the organization. Describe their value as a team player and their high potential for future contributions. Stress the difficulties and likely failures that will occur in their absence and the dearth of candidates qualified to replace them. You have spent time nurturing their growth into a star member of your team. It is impossible to simply replace them.&lt;/p&gt;
&lt;p&gt;Also, be sure to call out salary inequity within the team to your director and you HR rep. As discussed above, there is a systemic bias against black and female candidates. And those that do get hired are often paid less than their teammates. Don’t be complacent about that. Call it out when you see it and advocate for fair pay. I discussed in an earlier section the reasons we should hire these candidates. Getting them at a discount compared to other candidates should not be one of your reasons.&lt;/p&gt;
&lt;h3 id=&#34;expansion&#34;&gt;Expansion&lt;/h3&gt;
&lt;p&gt;This action is probably the most difficult and the most out of your control as a team manager. But you should definitely advocate for a bigger team when it is obvious you need more hands on deck (and not just with limited term employees, which I discussed above). Despite the challenge, you should make your needs known. The squeaky wheel gets the grease. If you don’t make your needs known, and put some strong, convincing arguments behind your claims, then your director will never consider expanding your team.&lt;/p&gt;
&lt;h2 id=&#34;6-handling-exceptions&#34;&gt;6. Handling Exceptions&lt;/h2&gt;
&lt;p&gt;Finally, we come to the topic of what to do when training fails. What do you do about people on your team that just cannot (or will not) level up? Your options here are essentially to change your plans for them or show them the door. Usually this choice will depend on many factors including: their personality, their work history, your portfolio, your team size, and more.&lt;/p&gt;
&lt;h3 id=&#34;alternative-roles&#34;&gt;Alternative Roles&lt;/h3&gt;
&lt;p&gt;Sometimes when you come in as a new manager you will encounter employees that are hard working and enthusiastic, but after a few months it becomes obvious that they have reached a ceiling in regards to the types of skills you hoped they would acquire. At this point it is best to rethink your options. it would be extremely unfair to the employee to continue pushing them to raise the bar. It will cause them undue stress, destroy their confidence, sink their job satisfaction, and likely turn them into a disgruntled employee. It will cause resentment from teammates when they notice someone that is not pulling their weight despite having the same official role. It will also cause you undue frustration and likely cause missed deadlines due to unrealistic expectations.&lt;/p&gt;
&lt;p&gt;And yet, the person has shown nothing but dedication, which should never be undervalued. Sometimes this situation occurs because someone has been incorrectly hired or moved into a particular job classification. Or perhaps the job classifications in your organization are too broad. For instance, someone with the skills of a systems analyst or application administrator has been put into the coarse grained bucket of “programmer/analyst” which you incorrectly interpreted as “software engineer” in the absence of such a job title in your organization. Thus, you expect someone with the ability to build a web app from scratch, and instead you have a person that can write a little code to transform some metadata but who has no knowledge of network protocols, databases, web frameworks, etc. If you cannot get the person to that level that you were expecting, but the employee is still dedicated to the organization, then you should alter your expectations and formally change that employee’s job title and job description to fit their abilities. Carve out a role for them as a Systems Librarian, Business Application Analyst, etc. in which they can succeed and provide value to the team. The employee, you, your team, and your organization will all benefit from this change. It will give the employee the right soil in which to thrive and gain respect from peers. It will prevent you from setting unrealistic expectations and help you better plan your team’s roadmap. And you avoid the stress of the next option.&lt;/p&gt;
&lt;p&gt;A final note: be sure to talk to the employee about the option to change titles and job descriptions and why you think it is a good move. Do not just make this career decision for them.&lt;/p&gt;
&lt;h3 id=&#34;encouraging-exits&#34;&gt;Encouraging Exits&lt;/h3&gt;
&lt;p&gt;So what happens when you have an employee that has reached their ceiling and they do not want to take the alternative role you offered? Or perhaps you have an employee that is just resistant to any change at all? Well, in the section above on training I mentioned putting learning goals into employee performance reviews. There were two reasons for that. The primary reason is to show that you are serious about the learning initiative and that you are supporting your employees’ professional development. The second reason is for this unfortunate scenario. If the employee fails to demonstrate the acquisition of the necessary skills, you now have that documented, and you can discuss it with the employee. You can make it clear that acquiring these skills is a mandatory part of the job. If they do not want a job with those requirements you can try to define a new job title and description, but only if it is appropriate and valuable to the team and organization. Otherwise, they should look for a different job elsewhere.&lt;/p&gt;
&lt;p&gt;If it unfortunately gets to that awkward phase, discuss options with your HR department. It will likely take some time, but eventually you will be able to dismiss the employee. However, most people will see the writing on the wall and begin looking elsewhere. Fortunately, developers are in such high demand that even difficult ones can find another gig and relieve you of the burden of actually having to fire someone.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was (another) long post, but I hope that it proves helpful to my colleagues working in nonprofits who are new to management or who have just taken on the leadership of a new team. Managing technology in a nonprofit is not easy when the organization’s ambitions are high but the resources are low and the tools are dated. But by taking the steps above (along with some of the actions described in my previous post on modernization), you should be able to make significant improvements.&lt;/p&gt;
&lt;p&gt;And keep in mind at all times that you are working with people, not things. I chose the analogy of “growing a team” rather than the traditional phrase “building a team” precisely because growing a garden means working with living things that have their own needs. They’re not a stack of standard sized bricks that are made to fit together perfectly. They will not always conform to the idealistic vision in your head. So you need to adjust your plans accordingly.&lt;/p&gt;
&lt;p&gt;Of course, even the garden analogy falls short, as all analogies eventually do. Flowers and trees may have needs but they don’t have their own ambitions. The people on your team do. And they have feelings, families, and careers. No two are alike. You will have to adapt all the suggestions above to fit the needs of the people on your team and your organization. So it&amp;rsquo;s OK to think of your team as a garden, but treat the individuals on that team like people.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Banner image credit: UCLA Library Digital Collections&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://digital.library.ucla.edu/catalog/bbxp2000zz-89112&#34;&gt;https://digital.library.ucla.edu/catalog/bbxp2000zz-89112&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://misc.dev/posts/building-a-nonprofit-dev-team/ - </description>
        </item>
    
    
    
        <item>
        <title>Modernizing a Software Development Team</title>
        <link>https://misc.dev/posts/modernizing-a-dev-team/</link>
        <pubDate>Fri, 01 May 2020 21:16:39 -0700</pubDate>
        
        <guid>https://misc.dev/posts/modernizing-a-dev-team/</guid>
        <description>MISC.DEV https://misc.dev/posts/modernizing-a-dev-team/ -&lt;h1 id=&#34;modernizing-a-software-development-team&#34;&gt;Modernizing a Software Development Team&lt;/h1&gt;
&lt;h2 id=&#34;outdated-systems-beget-outdated-skills&#34;&gt;Outdated systems beget outdated skills&lt;/h2&gt;
&lt;p&gt;In this blog I write about systems and software primarily from the viewpoint of organizations that are not themselves technology firms. The choice to outsource all software development or to retain a team of developers within an organization’s IT department is a big one. I won’t discuss the timeless “build or buy” decision in this post. Instead, I would like to discuss what an organization does when an in-house software development team has grown outdated. Technology changes fast, and without motivation (at the individual, team, or organizational level) to keep current with new tools and methods, a team of developers can very easily find that their skills are a decade or two behind the times.&lt;/p&gt;
&lt;p&gt;Anecdotally, this situation seems to be quite common in non-profit and government organizations. Since these organizations are not driven by profits, improvements to performance and user experience are lower priorities than they are to commercial organizations. Thus, investments in improving software are reduced in size and frequency. If the organization does not prioritize improving the software, the tech stack will become outdated as do the skillsets of the people who are paid to keep that outdated system running.&lt;/p&gt;
&lt;p&gt;But what happens when such a team is forced to overhaul an outdated system? Perhaps the underlying tools are insecure and no longer supported. Or perhaps the code has simply become unmaintainable over the years. Can a team whose members have decades-old skills pick up modern tools to build the new system without external help? Will the team require a longer time frame for completion? Will a reduction in scope of the project be necessary to make it realistically achievable? Will the team require extra training resources to modernize their skills? Can the organization tolerate any (or all) of those constraints?&lt;/p&gt;
&lt;p&gt;If a consultant must be brought in to help with development the organization will likely (and rightly so) question the ongoing need for the in-house team. It seems that many organizations go through cycles of insourcing and outsourcing technology. Over time the in-house team grows stale and eventually a new IT director decides to reduce in-house resources and go with an external vendor to modernize. Over time this also becomes a problem. Either it is too costly because it is a custom solution for the organization, or it is a generic solution that proves insufficient for the organization’s needs. Either way, a new IT director comes in and recognizes that an in-house team is needed to solve the problem. And so it goes.&lt;/p&gt;
&lt;p&gt;Is this cycle OK, or is it something that should be avoided? Technology professionals command high salaries. Therefore, letting go of an entire team, or even a significant chunk of one, can be a quick way to recover a large chunk of an organization&amp;rsquo;s budget. Outsourcing technology is not exactly cheap either, but there are probably savings to be made. Beyond costs, cutting an in-house team means the loss of a large amount of institutional knowledge. The value of that tacit knowledge can be immense, especially in organizations with large numbers of people, departments, and long-running interdependent systems (e.g. many non-profit and government organizations).&lt;/p&gt;
&lt;p&gt;I will not try to argue whether it is better to in-source or out-source. I think it will depend on each organization’s context. However, I will say that if an in-house team already exists, it seems to me in more cases than not that the ideal solution is to keep the team and simply ensure that it does not grow stale. I am sure there are many scenarios where that is not true, but for the sake of argument (and for the sake of the remainder of this blog post) let’s assume that keeping the team is the preferred solution. We are then faced with the following two questions: “how can we modernize an existing software development team?” and “how can we ensure that a software development team’s skills do not grow stale?” A pithy reply might be “build systems that are easy to incrementally upgrade over time so that the technology changes with the times and so do the skills of its maintainers.” Sounds great as a theory, &lt;em&gt;but how do you actually do that in a real life setting?&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;case-study-ucla-library&#34;&gt;Case Study: UCLA LIbrary&lt;/h2&gt;
&lt;p&gt;As it so happens, I am in the middle of modernizing a real life team. In the Fall of 2018 I took on a new position as the Head of Software Development &amp;amp; Library Systems at the &lt;a href=&#34;https://library.ucla.edu&#34;&gt;UCLA Library&lt;/a&gt;. Over the past 18 months, I have initiated several  substantial changes to modernize our development processes, tech stacks, and skills.&lt;/p&gt;
&lt;h3 id=&#34;i-evaluation&#34;&gt;I. Evaluation&lt;/h3&gt;
&lt;p&gt;I spent the first few months on the job mostly observing the team and getting up to speed on their current projects and future ambitions. Here is what I found.&lt;/p&gt;
&lt;h4 id=&#34;1-structure&#34;&gt;1. Structure&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Low team cohesion.&lt;/strong&gt; The developers were in two different teams without much collaboration between them. The supporting sys admins were on a third team. Thus the software development process was split across three different managers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Siloed knowledge.&lt;/strong&gt; Most of the developers worked on projects as solo developers, not as a team. This gives each system a single point of failure in regards to maintenance and support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-process&#34;&gt;2. Process&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No standard dev process.&lt;/strong&gt; As solo agents without a standard process, the developers mostly reacted to incoming tickets from stakeholders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unending projects.&lt;/strong&gt; Without a standard process to define scope, many projects did not have a clear goal for completion and had lingered for years.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unrealistic volume of projects.&lt;/strong&gt; The combination of unending projects with a continual desire to keep doing more &lt;em&gt;new&lt;/em&gt; projects meant that the list of active projects grew without bound.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-software&#34;&gt;3. Software&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Untenable portfolio of systems.&lt;/strong&gt; As the aging digital collections system became unable to support the requirements of new projects, a series of boutique systems were created.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inconsistent UX.&lt;/strong&gt; Each system was created by a different developer or vendor, with no central UX process, person, or team to review them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Difficult maintenance and deployments.&lt;/strong&gt; Technical debt reached a level at which it became impossible to update some systems. Deployments for most systems were manual and cumbersome.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spotty performance and availability.&lt;/strong&gt; The older systems experience frequent outages requiring reboots. Others have high latency. Some are all but broken in modern browsers (i.e. Flash).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-skills&#34;&gt;4. Skills&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pockets of stagnation.&lt;/strong&gt; Some of those siloed developers working on aging systems were never asked or given time to build with new tools. Some kept up with modern tools on their own time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Widely diverse tool sets.&lt;/strong&gt; Each system was built by one of an array of siloed developers or another array of independent vendors, each using their preferred tools, leading to a portfolio that goes well beyond the modern trend of “polyglot.”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Team attrition.&lt;/strong&gt; Developers for major systems, notably the original digital collections system and the main website CMS, left the team and their positions were filled with developers whose expertise fit newer projects’ needs instead. Thus, the two most important systems are in a state of weak support.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outsourced expertise.&lt;/strong&gt; Many of the systems were built by vendors and handed over to the in-house developers for support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ii-inspiration&#34;&gt;II. Inspiration&lt;/h3&gt;
&lt;p&gt;Having diagnosed several symptoms of a team in need of modernization I was faced with the questions posed in the discussion above about what kinds of remedies would be effective for a real-life team. I had done a lot of reading on Agile, DevOps, and UX in my previous job, but had only made minor tweaks to the way that team operated. That organization (&lt;a href=&#34;https://www.getty.edu/&#34;&gt;The Getty&lt;/a&gt;) had undergone a reorganization, and my role as the architect and manager was in a state of limbo. In my new position at UCLA, I came in as the agent of change and I had the authority to set my own vision for the team. This was my chance to implement the ideas I had been learning.&lt;/p&gt;
&lt;h4 id=&#34;the-5-pillars&#34;&gt;The 5 Pillars&lt;/h4&gt;
&lt;p&gt;There are countless books, articles, and blogs that give the kind of advice I was seeking. But the five books listed below are the ones I have found to be the most inspiring, insightful, pragmatic, and (most importantly) actionable. They dig to the root of the problems they tackle and give practical advice on how to adopt the philosophies they put forth. I come back to them often for review and reference. These books are the pillars upon which I based the transformation of the team.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
  	&lt;td&gt;&lt;img align=&#34;left&#34; width=&#34;150&#34; alt=&#34;About Face book cover&#34; src=&#34;https://misc.dev/images/about_face_cover.jpg&#34; style=&#34;margin:10px;&#34;&gt;
	&lt;a href=&#34;http://www.worldcat.org/oclc/882938454&#34;&gt;About Face: The Essentials of Interaction Design&lt;/a&gt; (4th ed., 2014)
	&lt;br/&gt;by Alan Cooper, Robert Reimann, David Cronin, and Christopher Noessel
	&lt;br/&gt;&lt;br/&gt;There are many great books about user research and interaction/interface design. This is the one that got me hooked on UX as a standard part of the development process.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
  	&lt;td&gt;&lt;img align=&#34;left&#34; width=&#34;150&#34; alt=&#34;The Agile Samurai book cover&#34; src=&#34;https://misc.dev/images/agile_samurai_cover.jpg&#34; style=&#34;margin:10px;&#34;&gt;
  	&lt;a href=&#34;http://www.worldcat.org/oclc/936381130&#34;&gt;The Agile Samurai&lt;/a&gt; (2014) 
  	&lt;br/&gt;by Jonathan Rasmusson
  	&lt;br/&gt;&lt;br/&gt;You can easily get lost in the various flavors of Agile, such as Kanban, Scrum, XP, etc. This book provides a guide to the Agile process that is agnostic about any particular methodology. It gives you just the best practices from across all of the variations of Agile.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
  	&lt;td&gt;&lt;img align=&#34;left&#34; width=&#34;150&#34; alt=&#34;The DevOps Handbook book cover&#34; src=&#34;https://misc.dev/images/devops_handbook_cover.jpg&#34; style=&#34;margin:10px;&#34;&gt;
  	&lt;a href=&#34;http://www.worldcat.org/oclc/1029506934&#34;&gt;The DevOps Handbook&lt;/a&gt; (2016) 
  	&lt;br/&gt;by Gene Kim, Jez Humble, Patrick Debois, and John Willis
  	&lt;br/&gt;&lt;br/&gt;This is the most comprehensive assessment of DevOps I have read. The authors do a great job of explaining what DevOps is and isn’t, where it came from, what it offers, why it helps, and how to bring it into your shop.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
  	&lt;td&gt;&lt;img align=&#34;left&#34; width=&#34;150&#34; alt=&#34;Building Evolutionary Architectures book cover&#34; src=&#34;https://misc.dev/images/evolutionary_architectures_cover.jpeg&#34; style=&#34;margin:10px;&#34;&gt;
  	&lt;a href=&#34;http://www.worldcat.org/oclc/1043880409&#34;&gt;Building Evolutionary Architectures&lt;/a&gt; (2018) 
  	&lt;br/&gt;by Neal Ford, Rebecca Parsons, and Patrick Kua
  	&lt;br/&gt;&lt;br/&gt;Microservices and Event-Driven systems have been covered by many authors before. This group of architects manages to wrap these topics in a nice theory about “evolutionary” systems (those that can be adapted instead of becoming fragile) and offers advice on how to shift your own architectures in this direction.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
  	&lt;td&gt;&lt;img align=&#34;left&#34; width=&#34;150&#34; alt=&#34;Debuggin Teams book cover&#34; src=&#34;https://misc.dev/images/debugging_teams_cover.jpg&#34; style=&#34;margin:10px;&#34;&gt;
  	&lt;a href=&#34;http://www.worldcat.org/oclc/954285260&#34;&gt;Debugging Teams&lt;/a&gt; (2016) 
  	&lt;br/&gt;by Neal Ford, Rebecca Parsons, and Patrick Kua
  	&lt;br/&gt;&lt;br/&gt;It’s not all just about process, tools, and architecture. Modernizing a team is also about leadership and management. This book is a concise and practical guide to managing teams, especially those involved in technology development.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&#34;iii-transformation&#34;&gt;III. Transformation&lt;/h3&gt;
&lt;p&gt;Taking inspiration from those books, I pushed the following changes to address the issues discovered during the evaluation phase.&lt;/p&gt;
&lt;h4 id=&#34;1-strategy&#34;&gt;1. Strategy&lt;/h4&gt;
&lt;p&gt;It starts with the big picture view and the question “what do we envision for the future of the UCLA Library’s web presence?” I want a consistent and consolidated user experience. At the moment, we have content stored in multiple repositories, each with their own search interfaces that are not similar in either aesthetics or functionality. Why should users have to search for the right search interface? I envision a single search for all content in the library, even if the content is distributed across a dozen or more backend systems. And when systems or collections necessitate custom interfaces, they should have the same design elements and provide consistent experiences for the users. To achieve those UX and architectural goals, I created a new UX team and a new Architecture team.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UX Strategy.&lt;/strong&gt; Two of the developers on my team were interested in UX. One was more interested in research, the other in design. A perfect complementary pair! I enrolled them both in the &lt;a href=&#34;https://www.uclaextension.edu/design-arts/uxgraphic-design/certificate/user-experience&#34;&gt;UX Certificate&lt;/a&gt; program at &lt;a href=&#34;https://www.uclaextension.edu/&#34;&gt;UCLA Extension&lt;/a&gt;. A librarian in another unit had experience with usability testing, analytics, and SEO. I brought the four of us together and formed the UX Team.&lt;/p&gt;
&lt;p&gt;In our first year, we assessed the state of UX at the library using a maturity model and put together a 3 year &lt;strong&gt;&lt;a href=&#34;https://ucla.box.com/s/mldgoduuf33hsr3ysgrahzczrgni7kuo&#34;&gt;UX Strategic Plan&lt;/a&gt;&lt;/strong&gt; to move us to the next level of that model. This plan includes setting a standard process for all software development that requires UX research and design out the outset of any new development project. We are currently putting this into action by conducting thorough user research ahead of our website redesign.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Architectural Strategy.&lt;/strong&gt; The Architecture Team is made up of the technical leads from each of the software development subteams (described below). We spent most of the first year discussing policies about process and tooling as these underwent significant changes. We are now having more substantive discussions about actual architecture and a development roadmap as we prepare for complete replacements of our CMS and our library catalog and the &amp;ldquo;sunsetting&amp;rdquo; of several legacy digital collections platforms.&lt;/p&gt;
&lt;p&gt;We aspire to adopt the &amp;ldquo;evolutionary&amp;rdquo; architectures mentioned above, such as event-driven and microservices. These architectures are more maintainable and easier to change over time. No more “setting and forgetting” new systems that add to the large portfolio of fragile legacy monoliths. Instead, we hope to continually update an ecosystem of small components and keep pace with the ever changing requirements of the organization and stakeholders.&lt;/p&gt;
&lt;p&gt;As we build out our new distributed systems based on these architectural philosophies we will migrate content out of the legacy systems. And we will have a party every time one of those old systems is turned off.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-structure&#34;&gt;2. Structure&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unification.&lt;/strong&gt; One of the tenets of DevOps culture is that everyone is on the same team with shared objectives. No more division by functional duties or expertise (i.e. Devs vs Ops). No more throwing things &amp;ldquo;over a wall&amp;rdquo; for someone else to deal with. Thus, I brought both groups of developers as well as the sys admins that support them into a single Software Development Team, with a single manager (me).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Architectural Subteams.&lt;/strong&gt; To encourage the shift in our mindset about process and architecture, the team was organized into focused subteams. This move was based on the teaching of &lt;a href=&#34;http://www.melconway.com/Home/Conways_Law.html&#34;&gt;Conway’s Law&lt;/a&gt;, which states that “any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization&amp;rsquo;s communication structure.” The subteams are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Applications Team&lt;/strong&gt; (discovery, access, and scholarly apps;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Services Team&lt;/strong&gt; (backend APIs; deliver services to the applications)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Systems Team&lt;/strong&gt; (vendor systems; middleware; internal business apps)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Labs Team&lt;/strong&gt; (AI/ML experiments)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This organization forces a distinct separation between apps and services, thus avoiding monolithic structures, and encourages cleaner API designs and documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Matrix.&lt;/strong&gt; Each subteam is cross-functional, with one or more members from the architect’s group, the developers, dev support (sysadmins), project management, and UX when needed. This makes them self-sufficient, a key element of Agile teams as described in The Agile Samurai.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misc.dev/images/the_matrix.png&#34; alt=&#34;The Matrix of teams&#34;&gt;&lt;/p&gt;
&lt;p&gt;The members of these teams have been shuffled as needed, with one or two people swapping teams at the close of a quarter. The goal is to be flexible but to avoid frequent context switching.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-process&#34;&gt;3. Process&lt;/h4&gt;
&lt;p&gt;The standardization of processes has probably been the biggest and most impactful change the team has adopted. The reorganization certainly changed the culture drastically from one of solo programmers to one based in teamwork. But it has been the adoption of consistent processes for planning our work, contributing code, and deployment that has pushed the team furthest towards being a modern dev team and visibly increasing the quality and quantity of our work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Agile Planning.&lt;/strong&gt; We have adopted a &amp;ldquo;non-denominational&amp;rdquo; set of Agile practices as described in &lt;em&gt;The Agile Samurai&lt;/em&gt;. This includes adoption of the usual practices, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;working in two week sprints &lt;em&gt;(each subteam)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;holding daily standup meetings &lt;em&gt;(full team)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;using Kanban boards to visualize our work &lt;em&gt;(each subteam)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;including stakeholders in planning meetings &lt;em&gt;(some subteams)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;conducting retrospectives every sprint &lt;em&gt;(each subteam)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
  &lt;br/&gt;
&lt;p&gt;Most professionals that run an Agile development shop will advise you to only work on one project at a time. If you have five projects that each take a month to complete, it is better to work on one at a time and make only one wait five months than to work on all five in parallel and make all customers wait five months.
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;However, in non-profit&amp;rsquo;s we do not have the luxury of turning down projects. Thus, we have had to break some rules of Agile to accommodate parallel projects. As discussed in &lt;em&gt;The Agile Samurai&lt;/em&gt; the four biggest constraints on a project are time, money, quality, and scope. In non-profits, money is rarely adjusted. If the work is grant-funded, then adjusting time is also difficult. If you want be proud of your work, then you aren&amp;rsquo;t willing to sacrifice quality either. That leaves scope as the constraint to adjust.&lt;/p&gt;
&lt;p&gt;Thus, in addition to &lt;em&gt;sprint planning&lt;/em&gt;, I also engage our stakeholders and administrators in &lt;em&gt;quarterly planning&lt;/em&gt;. We go over the various projects and requested improvements, prioritize them, estimate the size of each initiative, and reduce the scope of work to a size that is realistically achieveable. This is Agile planning at a &lt;em&gt;macro&lt;/em&gt; level. It is something I have been trying to push upwards in the organization to avoid the crushing burden of the always-increasing list of projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuous Delivery.&lt;/strong&gt; Once the devs were on teams and not working on solo projects we needed to standardize the way code gets contributed, approved, merged, and deployed. The ideal scenario in a modern dev team is Continuous Deployment, in which code that passes automated test suites is automatically merged to the master branch and automatically deployed to production. We opted for intermediate steps in which we strive for Continuous Integration and Continuous Delivery. Code that passes automated tests is manually reviewed by another developer. If approved and merged it is automatically deployed to a staging environment, but production deployment remains a &amp;ldquo;push button&amp;rdquo; operation.&lt;/p&gt;
&lt;p&gt;Continuous Deployment requires high confidence in the quality of your team&amp;rsquo;s code, or an extremely thorough test suite, or an extremely easy process to roll back (or forward fix) production when problems occur. Really, you want all three of those attributes. We have made strides in improving the quality and rigor of our test suites, but we know we still have a long way to go. Therefore, we require that all code is reviewed by a second developer (using pull requests) before merging into master.&lt;/p&gt;
&lt;p&gt;I will forbear further discussion of our development practices and deployment pipeline. This topic can easily become just a list of particular tools the team chose for version control, testing and CI, configuration management, containerization, orchestration, hosting, pipeline automation, etc. and this post is about team management, not about tool selection. Suffice it to say we have chosen tools for each of those aspects of the dev process and tried to make our practices standard across all of the subteams. The standardization of the tools and process is the important part, not the particular tool.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-culture&#34;&gt;4. Culture&lt;/h4&gt;
&lt;p&gt;The final piece in my attempt to modernize the team was the most nebulous: changing the culture. How do you change the culture of an entire team? In settings with an existing culture or set of policies and norms, I suspect this could be quite a challenge. However, since most of the developers had been working on solo projects, there was not much of an ingrained culture to confront. This it not to say that there was no culture at all. All organizations have a culture. But some are more pronounced than others and some are more rigid than others. In this case, it was neither. It was about as close to a white canvas as one could hope for without building the team from scratch.&lt;/p&gt;
&lt;p&gt;Thus, given the opportunity to evangelize a new culture, I faced the question: &amp;ldquo;what kind of culture do I wish to introduce?&amp;rdquo; For this, I leaned heavily on the advice of the &lt;em&gt;The DevOps Handbook&lt;/em&gt;. In that book, the authors break down DevOps culture into three &amp;ldquo;ways&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This first way focuses on making the development process more efficient and improving the &lt;em&gt;feed forward&lt;/em&gt; cycles. The second way focuses on improving &lt;em&gt;feed back&lt;/em&gt; cycles so that problems are discovered and addressed as soon as possible. The third way focuses on methods of continual improvement of the team and its work through learning and experimentation. These three &amp;ldquo;ways&amp;rdquo; are both necessary and sufficient to improve the quality and quantity of work a software development team produces. Thus, I tried to introduce changes that would help us in each of the three ways.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The 1st Way: Efficient Feed Forward Cycles.&lt;/em&gt; The changes I introduced here were covered in the sections above. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Self sufficient teams&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile process and planning&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Delivery&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;The 2nd Way: Fast Feedback Cycles.&lt;/em&gt; Again, the changes I introduced here were already mentioned above, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automated testing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer reviews of all committed code&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mini retrospectives every sprint&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stakeholders in daily standups&lt;/strong&gt; &lt;em&gt;(solves problems faster than email)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;The 3rd Way: Continual Learning, Experimentation, and Improvement.&lt;/em&gt; The changes I introduced to address this final &amp;ldquo;way&amp;rdquo; are what I wish to focus on, as I have not mentioned any of these changes yet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Refactor Sprints and Goals.&lt;/strong&gt; It can be difficult to get individual refactor tickets into a sprint. And even when they make it into the sprint, they will often be neglected and buried by higher priority tickets that address existing (and more visible) goals for the sprint or quarter. Therefore, we began dedicating one sprint each quarter entirely to refactor efforts.&lt;/p&gt;
&lt;p&gt;Some teams that are struggling to deal with small-community open-source platforms have refactor work that will span more than a single sprint, due to the amount of time needed to conduct an audit and set a strategy for the overhaul. Therefore, instead of a refactor sprint, these teams have a refactor goal for the quarter and during each backlog grooming and sprint planning session we make sure that we make progress towards that goal just like any other goal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Learning Fridays.&lt;/strong&gt; In order to modernize our skills, the team needs time dedicated to learning new tools and techniques. I began by asking everyone to find time in their own schedules and to dedicate 4 hours a week to learning. I purchased subscriptions to multiple learning platforms for various team members based on their interests and preferred learning methods.&lt;/p&gt;
&lt;p&gt;However, just as refactor tickets will be neglected without an agreed upon time dedicated to them, so goes &amp;ldquo;learning time.&amp;rdquo; Thus, we designated Fridays as a &amp;ldquo;no meetings&amp;rdquo; day and developers are encouraged to spend the entire day on learning and experimentation, though they are free to work on development tickets if they wish. The absence of meetings gives everyone the uninterrupted mental break they need to actually learn new things. We have arranged with our stakeholders to respect the &amp;ldquo;no meeting&amp;rdquo; policy. In fact, now other units in the Library are adopting similar practices.&lt;/p&gt;
&lt;p&gt;I should note that we do have one meeting on Fridays. We have our 15 minute daily standup at the regular time. But instead of looking at each team&amp;rsquo;s Kanban board, we look at the &amp;ldquo;Learning board.&amp;rdquo; Each quarter every member of the team creates learning goals for themselves and creates tickets for those goals in a dedicated Kanban board. We checkin with everyone during the Friday standup and hear about their progress on their learning topics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Knowledge Sharing Sessions.&lt;/strong&gt; To spread that learning beyond individuals, we have monthly &amp;ldquo;Dev Jams&amp;rdquo; in which team members demonstrate the tools they have been learning or the experiments they have been conducting. This practice existed before I joined the team, but it had languished for a bit. We revived it and have been experimenting with different formats to keep it fresh.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Experimentation.&lt;/strong&gt; Improvement isn&amp;rsquo;t just about learning new techniques. Not everything that works well for other organizations will be a good fit for ours.  Therefore, in conjunction with learning new tools and techniques, we must try things out and determine if they improve our processes or products.&lt;/p&gt;
&lt;p&gt;Some of these experiments are conducted by individuals during Learning Fridays, but some are part of the quarterly goals of a subteam. These team experiments are more strategic. They are used to inform decisions about parts of our system architecture or even the viability of entire initiatives. We aim to share that knowledge with our peers via white papers and peer reviewed articles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Quarterly Retrospectives.&lt;/strong&gt; Finally, I should note that all of the changes I have discussed so far are experiments in themselves. Some have undergone multiple variations to find a form that is beneficial without being cumbersome. One way we continually assess our culture and customs is through a full-team retrospective each quarter. These retrospectives have been very informative and help us focus on what is of greatest concern rather than spending time on matters of interest but not of import. Once we determine what needs to be addressed, we brainstorm ideas and define action items for the following quarter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s been approximately 18 months since I first began initiating changes in the team. As mentioned above, some of these interventions needed more than one variation before gaining traction. I have been incredibly lucky to join a team that was so accepting of these changes. The team members were aware of their needs and welcomed the opportunity to try new tools and techniques and to transform themselves into a modern dev team. We joke sometimes that by purchasing copies of the books mentioned above for several people on my team that I was assigning reading to them as I do the students in my classes. But jokes aside, the team is very much interested in learning and is always happy to get pointers to good resources.&lt;/p&gt;
&lt;p&gt;So, the question to ask now is, &amp;ldquo;did any of these changes help?&amp;rdquo; I can say with a high level of confidence that yes these changes have improved the quality and quantity of our work and we are now operating like a modern software development team. We still have more to learn and have plenty of room for growth, but we have absolutely leveled up in terms of our DevOps maturity.&lt;/p&gt;
&lt;p&gt;Recall the specific issues I observed in the &amp;ldquo;Evaluation&amp;rdquo; phase above. Here is a summary of how they have been effectively overcome:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reorganization addressed the issues of low team cohesion and siloed knowledge. The teamwork has been truly amazing to watch. Pair programming and mob programming have been adopted by the developers without any push from me.&lt;/li&gt;
&lt;li&gt;Agile planning and quarterly planning have tamed the ever-growing list of unending projects. Stakeholders and administrators are aware that adding to the list of projects or goals means reducing the scope of some or all of them because they are involved in the quarterly planning.&lt;/li&gt;
&lt;li&gt;The new UX Team has begun work on a standard process and a new Design System will be delivered as part of our website redesign project, paving the way for a consistent UX across multiple user interfaces.&lt;/li&gt;
&lt;li&gt;The Architecture Team has pushed standardization, thus addressing the issue of diverse toolsets. They have begun work on a development roadmap that will determine the architecture of our future systems that are easy to maintain and thus address the performance and availability issues.&lt;/li&gt;
&lt;li&gt;There is a fifth subteam I did not mention above, named the Legacy Team. Each quarter this team selects one or more legacy digital collections applications and aims to migrate the content into the new repository and shut down the legacy system, thus reducing our portfolio of supported systems.&lt;/li&gt;
&lt;li&gt;The three preceding measures all address the issues of team attrition and outsourced expertise as we turn off the old systems and build the new systems ourselves.&lt;/li&gt;
&lt;li&gt;The DevOps culture and Learning Fridays have addressed the pockets of stagnating skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I considered adding a final section to this post with a quantitative assessment of how effective the changes have been so far. However, this post has already become much longer than anticipated. So, for now, I will conclude with a more qualitative, or anectdotal assessment and I may followup with another post that examines some more quantitative measures. But to be honest, in these matters I feel that a qualitative assessment is more valuable. As a manager I gauge the success of the team not on the count of tickets closed or lines of code written. Achieving our quarterly goals and meeting our stakeholders&amp;rsquo; expectations is how we are judged by others, and that is more important than any numbers. Over the past 18 months we have done very well in satisfying stakeholder expectations. Part of that is due to setting reasonable expectation with our quarterly planning, but the bulk of that success comes from the team operating in a way that facilitates high quality and quantity of work.&lt;/p&gt;
&lt;p&gt;Success is one thing, but what is more pertinent to this post is gauging the team&amp;rsquo;s progress. Over the past 18 months I have observed incredible teamwork, increased confidence, improved clarity of direction, proactive problem solving, and an increased desire for continual improvement. I am proud of the work we have accomplished, and I&amp;rsquo;m not just talking about the software. I&amp;rsquo;m talking about the culture.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Banner image credit: UCLA Library Digital Collections&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://digital.library.ucla.edu/catalog/4vft2000zz-89112&#34;&gt;https://digital.library.ucla.edu/catalog/4vft2000zz-89112&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://misc.dev/posts/modernizing-a-dev-team/ - </description>
        </item>
    
    
    
        <item>
        <title>Mic Check</title>
        <link>https://misc.dev/posts/mic-check/</link>
        <pubDate>Sat, 25 Apr 2020 18:43:04 -0700</pubDate>
        
        <guid>https://misc.dev/posts/mic-check/</guid>
        <description>MISC.DEV https://misc.dev/posts/mic-check/ -&lt;p&gt;Microphone check, one two, one two!&lt;/p&gt;
&lt;p&gt;In this blog I will discuss things I am interested in, which are broad and varied, hence the name &lt;em&gt;&lt;strong&gt;misc&lt;/strong&gt;&lt;/em&gt;. I will try to stay (mostly) focused on topics related to my professional career, thus topics that will likely be covered most often include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;: Management&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;: Information Studies (and Interface/Interaction Design)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;: Systems Thinking/Theory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;: Complexity&lt;/li&gt;
&lt;li&gt;and of course, software &lt;strong&gt;dev&lt;/strong&gt;elopment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, again, the name &lt;strong&gt;misc.dev&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Banner image credit: UCLA Library Digital Collections&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://digital.library.ucla.edu/catalog/kjccd200zz-89112&#34;&gt;https://digital.library.ucla.edu/catalog/kjccd200zz-89112&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://misc.dev/posts/mic-check/ - </description>
        </item>
    
    
    
    
  </channel>
</rss> 