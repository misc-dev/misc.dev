<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>management on MISC DEV</title>
    <link>https://misc.dev/tags/management/</link>
    <description>Recent content in management on MISC DEV</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 May 2020 21:16:39 -0700</lastBuildDate>
    
	<atom:link href="https://misc.dev/tags/management/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modernizing a Software Development Team</title>
      <link>https://misc.dev/posts/modernizing-a-dev-team/</link>
      <pubDate>Fri, 01 May 2020 21:16:39 -0700</pubDate>
      
      <guid>https://misc.dev/posts/modernizing-a-dev-team/</guid>
      <description>Modernizing a Software Development Team Outdated systems beget outdated skills In this blog I write about systems and software primarily from the viewpoint of organizations that are not themselves technology firms. The choice to outsource all software development or to retain a team of developers within an organization’s IT department is a big one. I won’t discuss the timeless “build or buy” decision in this post. Instead, I would like to discuss what an organization does when an in-house software development team has grown outdated.</description>
    </item>
    
  </channel>
</rss>